Components
--------------------
* HEADER	
* SIDENAV 
* MAIN CONTENT	
* FOOTER

Component in Code
--------------------
-> Component are placed in a javascript file
for ex: App component is placed in app.js 

Component Types 
--------------------
* Stateless Functional Component
	-> Javascript function
	-> Return HTML that describe the UI
	-> Ex: function welcome(props) {
		   	return <h1> Hello, {props.name} </h1>;
	}
* Stateful Class Component
	-> Regular es6 class
	-> Render method returning HTML
	-> Ex: class welcome extends React.Component{
	  	   	 render() {
		   		return <h1> Hello, {this.props.name} </h1>;
		   	 	}
		   	 }

Functional Components Breif
------------------------------
It accept an input of Properties -> Javascript function -> Return HTML (JSX)
ex: 
-> create a new file under src and name it greet.js (any name)
import React from "react"
//first functional components 
function Greet() {  
    return <h1>Hello Nishant</h1>
}
export default Greet;
->then in App.js delete all the html components and first 
import Greet from './components/greet';
-> then under below return under function  
 return (
    <div className="App">
      <Greet/> 
    </div>
  );
###################################################################
 NOTE: But the best way is to define is to use es6 arrow function 
###################################################################
 -> es6 arrow function syntax:
	const Greet = () => <h1>Hello World!</h1>
	export default Greet;

Class Component
-------------------------
Receive properties(props) as input -> ES6 class (state) -> HTML(JSX)
ex:
import React, {Component} from "react"
class Greet extents Component {
	render(){                      // render method that return null or html 
		return <h1> hello world </h1>
	}
}
export default Greet;

Functional vs Class Components
-------------------------------
Functional
* Simple Function
* Use Func componets as much as possible
* Absence of 'this' keyword
* Solution without using state
* Mainly responsible for the UI

Class
* More feature rich
* Maintain their own private data - state
* Complex UI logic
* Provide lifecycle hooks

JSX
-------------
-> JavaScript XML (JSX) - Extension to the JavaScript language syntax.
-> Write XML-like code for elements and components.
-> JSX is not a necessity to write React application.
-> JSX just makes code simpler and elegant.
-> JSX ultimately transpiles to pure 
-> JavaScript which is understood by the browser.


##########################################
Note: React Element should be PascalCased
ex: AnyNum, Anyval , Mainui etc
##########################################

ex:
With JSX:
---------
const jsxuses = () => {
    return (
        <div>     
            <h1> Hey there!</h1>
        </div>
    );
}

export default jsxuses;

Without JSX:
------------
const jsxuses () => {
	return React.createElement(
		'div',
		{className:'nclass',id:'nid'},
		React.createElement('h1','null','hello world!')
	);
}

JSX difference
--------------
class -> className
for   -> htmlFor
* camelCase property naming convention
* onclick  -> onClick
* tabindex -> tabIndex

Props (Properties)
--------------------
-> It is a optional input that a component can accept.
-> It also allow the component to be dynamic.

ex: 
In App.js
----------
<div className="App">
	<Jsxuses name ="Nishant">
	<Jsxuses name ="Vimal">
	<Jsxuses name ="Gaurav">
</div>
In jsxUses.js
--------------
const jsxuses = (props) => {
	return (<h1> Hello {props.name});
}

From the above example it simple return hello and the respected string in each case now lets talk about 
there child components:-
ex: 
In function component:-
-----------------------
<div className="App">
	<Jsxuses name ="Nishant"><h2>I am your child</h2></Jsxuses>
    <Jsxuses name ="Vimal"><h3>I am your child </h3></Jsxuses>
    <Jsxuses name ="Gaurav"><h4>I am your child </h4></Jsxuses>
</div>

ex:-
const jsxuses = (props) => {
return (
<div>							// for accessing child component, div tag is used 
	<h1> Hello {props.name}); 
	{props.children}            // child comp
</div>
}

we can also used props in some more ways:-
1)
const jsxuses = ({name,children}) => {
    //console.log(props)
    return (
    <div>
        <h1> Hey {name}</h1>
        {children}
    </div>
    )
}

2) 
const jsxuses = (props) => {
    const {name,children} = props
    //console.log(props)
    return (
    <div>
        <h1> Hey {name}</h1>
        {children}
    </div>
    )
}

In class:-
----------
In class just props.name and props.children is converted into this.props.name and this.props.children
class jsxuses extends Components{
	return(
	<div>
		<h1> Hello {this.props.name});
		{this.props.children}
	)
}
we can also used props in some more ways:-
class jsxuses extends Component{
	render() {
	const {name} = this.props 
	return(
	<div>
		<h1> Hello {name} </h1>
		{this.props.children}
    </div>
	)
}
}
props vs state
---------------
props

* props get passed to component
* Function parameters
* props are immutable
* props - Functional Components
  this.props - Class Components

state

* state is managed within the component
* Variable declared in the function body
* state can be changed
* useState Hook - Functional Components
  this.state - Class components

state :
---------
state is an object that is privately maintained inside a component and a state can influence what to 
render on  the browser
ex:
class StateUses extends Component{
    constructor(){
        super()
        this.state = {                                      
            message:"Please Subscribe"
        }
    }
    changeMessage() {							
        this.setState( {						//to change the the state of a component
            message:"Thanks for subscribing"
        } )
    }
    render(){
        return (
            <div>
                <h1>{this.state.message}</h1>
                <button onClick = {() => this.changeMessage()}>Subscribe</button>    
            </div>
        )   
    }
}

2)
import React, { Component } from 'react'

class FunctionClick extends Component{
    constructor(props) {
        super(props)
    
        this.state = {
            message:"hello world"
        }
    }
    
    eventHandler() {
        this.setState(prevState => ({
            message: "hello hii"
        }))
    }

    render() {
    return (
        <div>    
            {this.state.message}
            <button onClick = {() => this.eventHandler()}>Click</button>
        </div>
    )
    }
}

export default FunctionClick


react snippets-
-----------------
rce - to create a class component
rconst - to create constructor and super

one more example: 
#important example
class Counter extends Component {
    constructor(props) {
        super(props)
    
        this.state = {
             count:0
            
        }
    }
    changeCount() {
        this.setState(prevState => ({       //always use a function ex: prevState instead of using  
            count:prevState.count+1 		//this.create.count+1
        }))
    }

    render() {
        return (
            <div>
                Count = {this.state.count}
                <button onClick = {() => this.changeCount()}> Click Me</button> 
            </div>
        )
    }
}


###################################################################################################
NOTE: When I have to update the state based on previous state (for ex: in the above code there is count:0 state which is a previous state beacuse I have to based on it, as to increment with it from count : 0 to count: 1 and so on... and the new value is store on it) that why it is better to use a function as I mention above   
###################################################################################################

Event Handling
---------------
When the user interact with application, events are fired.
ex: mouse clicks, mouse over, etc

ex of event:
//event in function

function FunctionClick() {
    function eventHandler() {
        alert("Hey there");
    }
    return (
    <button onClick = {eventHandler}>Click</button> //in js <button onclick = "eventHandler">
    );
}

//event in class
class FunctionClick extends Component{
  clickHandler() {
        alert("hello");
    }

    render(){
    return (
        <div>
            <button onClick ={this.clickHandler}>Click</button>
        </div>
    )
    }
}


Binding Event Handlers
-----------------------

1 method) 
//Binding in the render method
import React, { Component } from 'react'

class FunctionClick extends Component{
    constructor(props) {
        super(props)
    
        this.state = {
            message:"hello world"
        }
    }
    
    eventHandler() {
        this.setState({
            message: "hello hii"
        })
    }

    render() {
    return (
        <div>    
            {this.state.message}
            <button onClick = {this.eventHandler.bind(this)}>Click</button>
        </div>
    )
    }
}

export default FunctionClick


2 method)
// I mention above arrow function code but still I mention again lol

class FunctionClick extends Component{
    constructor(props) {
        super(props)
    
        this.state = {
            message:"hello world"
        }
    }
    
    eventHandler() {
        this.setState({
            message: "hello hii"
        })
    }

    render() {
    return (
        <div>    
            {this.state.message}
            <button onClick = {() => this.eventHandler()}>Click</button>
        </div>
    )
    }
}

3 method)
// most use approch beacuse in this case, binding happpens once in the 
constructor

class FunctionClick extends Component{
    constructor(props) {
        super(props)
    
        this.state = {
            message:"hello world"
        }
        this.eventHandler = this.eventHandler.bind(this)
    }
    
    eventHandler() {
        this.setState({
            message: "hello hii"
        })
    }

    render() {
    return (
        <div>    
            {this.state.message}
            <button onClick = {this.eventHandler}>Click</button>
        </div>
    )
    }
}




4 method) 
// arrow function as a class property

class FunctionClick extends Component{
    constructor(props) {
        super(props)
    
        this.state = {
            message:"hello world"
        }
    }
    
    eventHandler = () =>{
        this.setState({
            message:'hi there'
        })
    }
    render() {
    return (
        <div>    
            {this.state.message}
            <button onClick = {this.eventHandler}>Click</button>
        </div>
    )
    }
}
